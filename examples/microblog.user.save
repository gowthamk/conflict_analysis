# Auto generated by conflict_analysis
def save(user)
  v0 := user.id
  v1 := user.name
  v2 := user.email
  v3 := user.created_at
  v4 := user.updated_at
  v5 := user.password_digest
  v6 := user.remember_token
  v7 := user.admin
  if (v7==true) then
    v8 := post.id
    v9 := post.content
    v10 := post.user_id
    v11 := post.created_at
    v12 := post.updated_at
    SQL (begin transaction)
    v13 := v1.length
    v14 := v13<=50
    if (v14==true) then
      v15 := v2=~(?i-mx:\A[\w+\-.]+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z)
      if (v15==true) then
        SQL (rollback transaction)
      else
        v16 := v2.[0, 255]
        v17 := SQL (SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('v16') LIMIT 1)
        v19 := v17.map do |v18|
          {one => v18.one}
        end
        v20 := v19.first
        if (v20==) then
          v21 := user.password.length
          v22 := v21>=6
          if (v22==true) then
            v23 := v2==false
            if (v23==true) then
              SQL (rollback transaction)
            else
              v24 := SQL (INSERT INTO "users" ("admin", "created_at", "email", "id", "name", "password_digest", "remember_token", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?))
              v26 := v0==false
              if (v26==true) then
                SQL (rollback transaction)
              else
                SQL (commit transaction)
              end
            end
          else
            SQL (rollback transaction)
          end
        else
          SQL (rollback transaction)
        end
      end
    else
      SQL (rollback transaction)
    end
  else
    v8 := post.id
    v9 := post.content
    v10 := post.user_id
    v11 := post.created_at
    v12 := post.updated_at
    SQL (begin transaction)
    v13 := v1.length
    v14 := v13<=50
    if (v14==true) then
      v15 := v2=~(?i-mx:\A[\w+\-.]+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z)
      if (v15==true) then
        SQL (rollback transaction)
      else
        v16 := v2.[0, 255]
        v17 := SQL (SELECT  1 AS one FROM "users"  WHERE LOWER("users"."email") = LOWER('v16') LIMIT 1)
        v19 := v17.map do |v18|
          {one => v18.one}
        end
        v20 := v19.first
        if (v20==) then
          v21 := user.password.length
          v22 := v21>=6
          if (v22==true) then
            v23 := v2==false
            if (v23==true) then
              SQL (rollback transaction)
            else
              v24 := SQL (INSERT INTO "users" ("admin", "created_at", "email", "id", "name", "password_digest", "remember_token", "updated_at") VALUES (?, ?, ?, ?, ?, ?, ?, ?))
              v26 := v0==false
              if (v26==true) then
                SQL (rollback transaction)
              else
                SQL (commit transaction)
              end
            end
          else
            SQL (rollback transaction)
          end
        else
          SQL (rollback transaction)
        end
      end
    else
      SQL (rollback transaction)
    end
  end
end
